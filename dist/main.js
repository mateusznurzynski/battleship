(()=>{var e={150:(e,n,t)=>{"use strict";t.d(n,{Z:()=>A});var r=t(537),i=t.n(r),o=t(645),a=t.n(o),s=t(667),c=t.n(s),l=new URL(t(967),t.b),d=a()(i()),u=c()(l);d.push([e.id,`html {\n  box-sizing: border-box;\n  overflow-x: hidden;\n}\n*,\n*::after,\n*::before {\n  box-sizing: inherit;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --success: #28a745;\n  --info: #17a2b8;\n  --warning: #ffc107;\n  --danger: #dc3545;\n  --light: #f8f9fa;\n  --dark: #343a40;\n\n  --success-hover: #31b14f;\n  --info-hover: #2ca8bb;\n  --warning-hover: #ffc929;\n  --danger-hover: #fd3e51;\n\n  --tile-size: 32px;\n}\n\nbody {\n  background-color: var(--dark);\n  background-image: url(${u});\n  background-size: cover;\n  color: white;\n  font-family: Arial, Helvetica, sans-serif;\n  display: flex;\n}\n\n.overlay {\n  height: 100vh;\n  height: 100svh;\n  width: 100%;\n  background-color: rgba(0, 0, 0, 0.4);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 15px;\n}\n\n.status {\n  font-size: 2.5rem;\n  margin-bottom: 50px;\n}\n\n.axis-button {\n  margin-bottom: 15px;\n  background-color: var(--info);\n  color: white;\n  padding: 7px;\n  cursor: pointer;\n  border-radius: 5px;\n  display: none;\n}\n\n.gameboards {\n  display: flex;\n  width: 100%;\n  justify-content: space-evenly;\n}\n\n.gameboard {\n  display: grid;\n}\n\n.tile {\n  height: var(--tile-size);\n  width: var(--tile-size);\n  position: relative;\n}\n\n.gameboard-player .tile {\n  box-shadow: 2px 0 0 0 var(--success), 0 2px 0 0 var(--success),\n    2px 2px 0 0 var(--success), 2px 0 0 0 var(--success) inset,\n    0 2px 0 0 var(--success) inset;\n}\n\n.gameboard-player .tile:hover {\n  z-index: 1;\n  box-shadow: 2px 0 0 0 greenyellow, 0 2px 0 0 greenyellow,\n    2px 2px 0 0 greenyellow, 2px 0 0 0 greenyellow inset,\n    0 2px 0 0 greenyellow inset;\n}\n\n.gameboard-computer .tile {\n  cursor: pointer;\n  box-shadow: 2px 0 0 0 var(--danger), 0 2px 0 0 var(--danger),\n    2px 2px 0 0 var(--danger), 2px 0 0 0 var(--danger) inset,\n    0 2px 0 0 var(--danger) inset;\n}\n\n.gameboard-computer .tile:hover {\n  z-index: 1;\n  box-shadow: 2px 0 0 0 orange, 0 2px 0 0 orange, 2px 2px 0 0 orange,\n    2px 0 0 0 orange inset, 0 2px 0 0 orange inset;\n}\n\n.tile[ship='alive'] {\n  background-color: rgba(153, 255, 0, 0.65);\n}\n.tile[ship='attacked'] {\n  background-color: rgba(255, 0, 0, 0.65);\n}\n.tile[ship='destroyed'] {\n  background-image: linear-gradient(\n    45deg,\n    #000000 25%,\n    #ff0000 25%,\n    #ff0000 50%,\n    #000000 50%,\n    #000000 75%,\n    #ff0000 75%,\n    #ff0000 100%\n  );\n  background-size: 11.31px 11.31px;\n}\n\n.tile[attacked] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n}\n.tile[attacked]::before {\n  content: '';\n  height: var(--tile-size);\n  border-left: 2px solid #fff;\n  position: absolute;\n  transform: rotate(45deg);\n  left: calc(var(--tile-size) / 2);\n}\n.tile[attacked]::after {\n  content: '';\n  height: var(--tile-size);\n  border-left: 2px solid #fff;\n  position: absolute;\n  transform: rotate(-45deg);\n  left: calc(var(--tile-size) / 2);\n}\n\n.tile[placing] > .highlight {\n  position: absolute;\n  top: 1px;\n  left: 1px;\n  font-weight: bold;\n  color: white;\n  height: var(--tile-size);\n  width: var(--tile-size);\n  background-color: cyan;\n  pointer-events: none;\n  z-index: 1;\n}\n`,"",{version:3,sources:["webpack://./src/main.css"],names:[],mappings:"AAAA;EACE,sBAAsB;EACtB,kBAAkB;AACpB;AACA;;;EAGE,mBAAmB;EACnB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,iBAAiB;EACjB,gBAAgB;EAChB,eAAe;;EAEf,wBAAwB;EACxB,qBAAqB;EACrB,wBAAwB;EACxB,uBAAuB;;EAEvB,iBAAiB;AACnB;;AAEA;EACE,6BAA6B;EAC7B,yDAA6C;EAC7C,sBAAsB;EACtB,YAAY;EACZ,yCAAyC;EACzC,aAAa;AACf;;AAEA;EACE,aAAa;EACb,cAAc;EACd,WAAW;EACX,oCAAoC;EACpC,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,aAAa;AACf;;AAEA;EACE,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,6BAA6B;EAC7B,YAAY;EACZ,YAAY;EACZ,eAAe;EACf,kBAAkB;EAClB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,WAAW;EACX,6BAA6B;AAC/B;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,wBAAwB;EACxB,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE;;kCAEgC;AAClC;;AAEA;EACE,UAAU;EACV;;+BAE6B;AAC/B;;AAEA;EACE,eAAe;EACf;;iCAE+B;AACjC;;AAEA;EACE,UAAU;EACV;kDACgD;AAClD;;AAEA;EACE,yCAAyC;AAC3C;AACA;EACE,uCAAuC;AACzC;AACA;EACE;;;;;;;;;GASC;EACD,gCAAgC;AAClC;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;AACpB;AACA;EACE,WAAW;EACX,wBAAwB;EACxB,2BAA2B;EAC3B,kBAAkB;EAClB,wBAAwB;EACxB,gCAAgC;AAClC;AACA;EACE,WAAW;EACX,wBAAwB;EACxB,2BAA2B;EAC3B,kBAAkB;EAClB,yBAAyB;EACzB,gCAAgC;AAClC;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,iBAAiB;EACjB,YAAY;EACZ,wBAAwB;EACxB,uBAAuB;EACvB,sBAAsB;EACtB,oBAAoB;EACpB,UAAU;AACZ",sourcesContent:["html {\n  box-sizing: border-box;\n  overflow-x: hidden;\n}\n*,\n*::after,\n*::before {\n  box-sizing: inherit;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --success: #28a745;\n  --info: #17a2b8;\n  --warning: #ffc107;\n  --danger: #dc3545;\n  --light: #f8f9fa;\n  --dark: #343a40;\n\n  --success-hover: #31b14f;\n  --info-hover: #2ca8bb;\n  --warning-hover: #ffc929;\n  --danger-hover: #fd3e51;\n\n  --tile-size: 32px;\n}\n\nbody {\n  background-color: var(--dark);\n  background-image: url('./img/background.jpg');\n  background-size: cover;\n  color: white;\n  font-family: Arial, Helvetica, sans-serif;\n  display: flex;\n}\n\n.overlay {\n  height: 100vh;\n  height: 100svh;\n  width: 100%;\n  background-color: rgba(0, 0, 0, 0.4);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 15px;\n}\n\n.status {\n  font-size: 2.5rem;\n  margin-bottom: 50px;\n}\n\n.axis-button {\n  margin-bottom: 15px;\n  background-color: var(--info);\n  color: white;\n  padding: 7px;\n  cursor: pointer;\n  border-radius: 5px;\n  display: none;\n}\n\n.gameboards {\n  display: flex;\n  width: 100%;\n  justify-content: space-evenly;\n}\n\n.gameboard {\n  display: grid;\n}\n\n.tile {\n  height: var(--tile-size);\n  width: var(--tile-size);\n  position: relative;\n}\n\n.gameboard-player .tile {\n  box-shadow: 2px 0 0 0 var(--success), 0 2px 0 0 var(--success),\n    2px 2px 0 0 var(--success), 2px 0 0 0 var(--success) inset,\n    0 2px 0 0 var(--success) inset;\n}\n\n.gameboard-player .tile:hover {\n  z-index: 1;\n  box-shadow: 2px 0 0 0 greenyellow, 0 2px 0 0 greenyellow,\n    2px 2px 0 0 greenyellow, 2px 0 0 0 greenyellow inset,\n    0 2px 0 0 greenyellow inset;\n}\n\n.gameboard-computer .tile {\n  cursor: pointer;\n  box-shadow: 2px 0 0 0 var(--danger), 0 2px 0 0 var(--danger),\n    2px 2px 0 0 var(--danger), 2px 0 0 0 var(--danger) inset,\n    0 2px 0 0 var(--danger) inset;\n}\n\n.gameboard-computer .tile:hover {\n  z-index: 1;\n  box-shadow: 2px 0 0 0 orange, 0 2px 0 0 orange, 2px 2px 0 0 orange,\n    2px 0 0 0 orange inset, 0 2px 0 0 orange inset;\n}\n\n.tile[ship='alive'] {\n  background-color: rgba(153, 255, 0, 0.65);\n}\n.tile[ship='attacked'] {\n  background-color: rgba(255, 0, 0, 0.65);\n}\n.tile[ship='destroyed'] {\n  background-image: linear-gradient(\n    45deg,\n    #000000 25%,\n    #ff0000 25%,\n    #ff0000 50%,\n    #000000 50%,\n    #000000 75%,\n    #ff0000 75%,\n    #ff0000 100%\n  );\n  background-size: 11.31px 11.31px;\n}\n\n.tile[attacked] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n}\n.tile[attacked]::before {\n  content: '';\n  height: var(--tile-size);\n  border-left: 2px solid #fff;\n  position: absolute;\n  transform: rotate(45deg);\n  left: calc(var(--tile-size) / 2);\n}\n.tile[attacked]::after {\n  content: '';\n  height: var(--tile-size);\n  border-left: 2px solid #fff;\n  position: absolute;\n  transform: rotate(-45deg);\n  left: calc(var(--tile-size) / 2);\n}\n\n.tile[placing] > .highlight {\n  position: absolute;\n  top: 1px;\n  left: 1px;\n  font-weight: bold;\n  color: white;\n  height: var(--tile-size);\n  width: var(--tile-size);\n  background-color: cyan;\n  pointer-events: none;\n  z-index: 1;\n}\n"],sourceRoot:""}]);const A=d},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&a[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),n.push(d))}},n}},667:e=>{"use strict";e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},798:function(e,n,t){e=t.nmd(e),function(t,r){"use strict";var i={};t.PubSub?(i=t.PubSub,console.warn("PubSub already loaded, using existing version")):(t.PubSub=i,function(e){var n={},t=-1,r="*";function i(e,n,t){try{e(n,t)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function o(e,n,t){e(n,t)}function a(e,t,r,a){var s,c=n[t],l=a?o:i;if(Object.prototype.hasOwnProperty.call(n,t))for(s in c)Object.prototype.hasOwnProperty.call(c,s)&&l(c[s],e,r)}function s(e){var t=String(e);return Boolean(Object.prototype.hasOwnProperty.call(n,t)&&function(e){var n;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n))return!0;return!1}(n[t]))}function c(e,n,t,i){var o=function(e,n,t){return function(){var i=String(e),o=i.lastIndexOf(".");for(a(e,e,n,t);-1!==o;)o=(i=i.substr(0,o)).lastIndexOf("."),a(e,i,n,t);a(e,r,n,t)}}(e="symbol"==typeof e?e.toString():e,n,i);return!!function(e){for(var n=String(e),t=s(n)||s(r),i=n.lastIndexOf(".");!t&&-1!==i;)i=(n=n.substr(0,i)).lastIndexOf("."),t=s(n);return t}(e)&&(!0===t?o():setTimeout(o,0),!0)}e.publish=function(n,t){return c(n,t,!1,e.immediateExceptions)},e.publishSync=function(n,t){return c(n,t,!0,e.immediateExceptions)},e.subscribe=function(e,r){if("function"!=typeof r)return!1;e="symbol"==typeof e?e.toString():e,Object.prototype.hasOwnProperty.call(n,e)||(n[e]={});var i="uid_"+String(++t);return n[e][i]=r,i},e.subscribeAll=function(n){return e.subscribe(r,n)},e.subscribeOnce=function(n,t){var r=e.subscribe(n,(function(){e.unsubscribe(r),t.apply(this,arguments)}));return e},e.clearAllSubscriptions=function(){n={}},e.clearSubscriptions=function(e){var t;for(t in n)Object.prototype.hasOwnProperty.call(n,t)&&0===t.indexOf(e)&&delete n[t]},e.countSubscriptions=function(e){var t,r,i=0;for(t in n)if(Object.prototype.hasOwnProperty.call(n,t)&&0===t.indexOf(e)){for(r in n[t])i++;break}return i},e.getSubscriptions=function(e){var t,r=[];for(t in n)Object.prototype.hasOwnProperty.call(n,t)&&0===t.indexOf(e)&&r.push(t);return r},e.unsubscribe=function(t){var r,i,o,a="string"==typeof t&&(Object.prototype.hasOwnProperty.call(n,t)||function(e){var t;for(t in n)if(Object.prototype.hasOwnProperty.call(n,t)&&0===t.indexOf(e))return!0;return!1}(t)),s=!a&&"string"==typeof t,c="function"==typeof t,l=!1;if(!a){for(r in n)if(Object.prototype.hasOwnProperty.call(n,r)){if(i=n[r],s&&i[t]){delete i[t],l=t;break}if(c)for(o in i)Object.prototype.hasOwnProperty.call(i,o)&&i[o]===t&&(delete i[o],l=!0)}return l}e.clearSubscriptions(t)}}(i)),void 0!==e&&e.exports&&(n=e.exports=i),n.PubSub=i,e.exports=n=i}("object"==typeof window&&window||this)},379:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],d=o[l]||0,u="".concat(l," ").concat(d);o[l]=d+1;var A=t(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(p);else{var f=i(p,r);r.byIndex=s,n.splice(s,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=t(o[a]);n[s].references--}for(var c=r(e,i),l=0;l<o.length;l++){var d=t(o[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}o=c}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},967:(e,n,t)=>{"use strict";e.exports=t.p+"2758238b9abcc113f352.jpg"}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,loaded:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&!e;)e=r[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{"use strict";var e=t(379),n=t.n(e),r=t(795),i=t.n(r),o=t(569),a=t.n(o),s=t(565),c=t.n(s),l=t(216),d=t.n(l),u=t(589),A=t.n(u),p=t(150),f={};f.styleTagTransform=A(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=d(),n()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals,t(967);var h=t(798),g=t.n(h);const b=document.querySelector(".gameboards"),m=document.querySelector(".status"),v=document.querySelector(".axis-button");v.addEventListener("click",(()=>{g().publish("axisChanged")}));const C=e=>{g().publish("enemyTileClicked",{row:e.target.getAttribute("data-row"),column:e.target.getAttribute("data-column")})},E=e=>{const n=b.querySelectorAll(".gameboard-computer > .tile");e?n.forEach((e=>{e.addEventListener("click",C)})):n.forEach((e=>{e.removeEventListener("click",C)}))},x=(e="div",n="",t="")=>{const r=document.createElement(e);return r.className=n,r.innerHTML=t,r},y=(e,n=!1)=>{const t=x("div","tile");return t.setAttribute("data-row",e.row),t.setAttribute("data-column",e.column),e.attacked?(t.toggleAttribute("attacked",!0),e.ship&&(t.setAttribute("ship","attacked"),e.ship.sunk&&t.setAttribute("ship","destroyed"))):n&&e.ship&&t.setAttribute("ship","alive"),t},B=e=>{m.innerText=e},w=(e,n,t=10)=>{b.innerHTML="";const r=e.tiles,i=n.tiles,o=x("div","gameboard gameboard-player");r.forEach((e=>{const n=y(e,!0);o.appendChild(n)}));const a=x("div","gameboard gameboard-computer");i.forEach((e=>{const n=y(e,!1);a.appendChild(n)})),o.style.gridTemplateColumns=`repeat(${t}, 1fr)`,a.style.gridTemplateColumns=`repeat(${t}, 1fr)`,v.style.display="none",b.appendChild(o),b.appendChild(a)},k=(e,n,t,r)=>{b.innerHTML="";const i=e.tiles,o=x("div","gameboard gameboard-player gameboard-init"),a=x("div","highlight");i.forEach((e=>{const r=y(e,!0);r.addEventListener("mouseenter",(()=>{r.toggleAttribute("placing",!0);const e=a.cloneNode(!0);"right"===t?e.style.width=`calc(var(--tile-size)*${n})`:"down"===t&&(e.style.height=`calc(var(--tile-size)*${n})`),r.appendChild(e)})),r.addEventListener("mouseleave",(()=>{r.toggleAttribute("placing",!1),r.innerHTML=""})),r.addEventListener("click",(()=>{g().publish("playerTileClicked",[e.row,e.column])})),o.appendChild(r)})),o.style.gridTemplateColumns=`repeat(${r}, 1fr)`,v.style.display="flex",b.appendChild(o)},S=e=>!!e&&{length:e,timesHit:0,sunk:!1,hit(){this.timesHit+=1,this.isSunk()},isSunk(){this.timesHit>=this.length&&(this.sunk=!0)}},z=(e,n,t=null)=>{if(!e||!n)throw Error("Invalid coordinates!");return{row:e,column:n,ship:t,attacked:!1}},O=(e=10)=>{const n=[];let t=1,r=1;for(let i=0;i<e*e;i+=1)n.push(z(t,r)),r<e?r+=1:(r=1,t+=1);const i=(e,n,t)=>{const r=[[...e]],i=[...e];for(let e=0;e<n-1;e+=1)switch(t){case"up":i[0]-=1,r.push([...i]);break;case"right":i[1]+=1,r.push([...i]);break;case"down":i[0]+=1,r.push([...i]);break;case"left":i[1]-=1,r.push([...i])}return r},o=(e,n)=>e[0]>=1&&e[0]<=n&&e[1]>=1&&e[1]<=n;return{tiles:n,size:e,attackedCoordinates:[],ships:[],getAdjacentCoordinates(e){return[[e[0]-1,e[1]],[e[0]-1,e[1]+1],[e[0],e[1]+1],[e[0]+1,e[1]+1],[e[0]+1,e[1]],[e[0]+1,e[1]-1],[e[0],e[1]-1],[e[0]-1,e[1]-1]].filter((e=>o(e,this.size)))},checkForAdjacentShips(e){return this.getAdjacentCoordinates(e).some((e=>!!this.findTile(e).ship))},validateShipCoordinates(e){let n=!0;return e.forEach((e=>{(!o(e,this.size)||this.checkForAdjacentShips(e)||this.findTile(e).ship)&&(n=!1)})),n},findTile(e){const n=(e[0]-1)*this.size+(e[1]-1);return this.tiles[n]},placeShip(e,n,t){if(n<1)return!1;const r=i(e,n,t);if(!this.validateShipCoordinates(r))return!1;const o=S(n);return this.ships.push(o),r.forEach((e=>{this.findTile(e).ship=o})),!0},placeShipRandomly(e,t){const r=[...n];let o;for(;r.length>0&&!o;){const n=Math.floor(Math.random()*r.length),a=[r[n].row,r[n].column],s=i(a,e,t);this.validateShipCoordinates(s)?o=a:r.splice(n,1)}return this.placeShip(o,e,t),o},validateHit(e){return!!o(e,this.size)&&!this.attackedCoordinates.some((n=>n[0]===e[0]&&n[1]===e[1]))},receiveHit(e){if(!this.validateHit(e))return!1;this.attackedCoordinates.push(e);const n=this.findTile(e);return n.attacked=!0,!n.ship||(n.ship.hit(),!0)},isEverythingSunk(){if(this.ships.length<=0)return!0;const e=this.ships.some((e=>!e.sunk));return!e}}},T=(e,n=10)=>{const t=O(n),r=[];let i=1,o=1;for(let e=0;e<n*n;e+=1)r.push([i,o]),o<n?o+=1:(o=1,i+=1);return{isHuman:e,gameBoard:t,boardSize:n,possibleTargets:r,targetedCoordinates:[],chooseRandomAttack(e=this.possibleTargets){return!(e.length<=0)&&e[(n=e.length,Math.floor(Math.random()*n))];var n},performRandomAttack(e){const n=this.chooseRandomAttack();this.targetedCoordinates.push(n);const t=this.possibleTargets.findIndex((e=>e[0]===n[0]&&e[1]===n[1]));return this.possibleTargets.splice(t,1),e.gameBoard.receiveHit(n),n}}},j=[4,3,3,2,2,2,1,1,1,1];let P,M=!1;const H=T(!1,10),I=()=>(P.gameBoard.isEverythingSunk()?(g().publish("gameEnded",{winner:"computer"}),1):H.gameBoard.isEverythingSunk()&&(g().publish("gameEnded",{winner:"player"}),1))?(M=!1,E(!1),!1):(M=!M,E(M),B(`It's ${M?"your":"the computer's"} turn!`),M),L=(e,n)=>{if(!M)return!1;const t=H.gameBoard.receiveHit([n.row,n.column]);return t&&g().publish("userAttacked",[n.row,n.column]),t},R=e=>{P=e,j.forEach((e=>{const n=["down","right"][Math.floor(2*Math.random())];H.gameBoard.placeShipRandomly(e,n)})),g().subscribe("enemyTileClicked",L),g().subscribe("userAttacked",(()=>{w(P.gameBoard,H.gameBoard),I(),((e=1e3)=>{M||setTimeout((()=>{const e=H.performRandomAttack(P);g().publish("computerAttacked",e)}),e)})(1e3)})),g().subscribe("computerAttacked",(()=>{w(P.gameBoard,H.gameBoard),I()})),g().subscribe("gameEnded",((e,n)=>{g().clearAllSubscriptions(),(({winner:e})=>{B(`Game ended! Winner: ${e}`)})(n)})),w(P.gameBoard,H.gameBoard),E(!0),I()},U=[4,3,3,2,2,2,1,1,1,1],$=T(!0,10);let Z=0,W=U[Z],N="right";B("Place your ships"),k($.gameBoard,W,N,10),g().subscribe("axisChanged",(()=>{N="right"===N?"down":"right",k($.gameBoard,W,N,10)})),g().subscribe("playerTileClicked",((e,n)=>{$.gameBoard.placeShip(n,W,N)&&(Z+=1,W=U[Z],k($.gameBoard,W,N,10)),W||(g().clearAllSubscriptions(),R($))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,